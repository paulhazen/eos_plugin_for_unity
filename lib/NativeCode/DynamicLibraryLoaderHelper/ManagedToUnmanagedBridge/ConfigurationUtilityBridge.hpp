#ifndef CONFIGURATION_UTILITY_BRIDGE_HPP
#define CONFIGURATION_UTILITY_BRIDGE_HPP

/*
 * Copyright (c) 2024 PlayEveryWare
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#pragma once

using namespace System;

/**
 * Reference the dll generated by the managed plugin code project - which
 * points to the C# files within the Unity project that are used to read and
 * determine configuration values.
 */
#using <ManagedPluginCode.dll>

namespace pew::eos::tests {
    using namespace Epic::OnlineServices::Platform;
    using namespace PlayEveryWare::EpicOnlineServices::Utility;

    /**
     * \brief This ref class is used to call a function defined in managed code
     * from an unmanaged (native) context.
     */
    public ref class ConfigurationUtilityBridge
    {
    public:
        /**
         * \brief Get the windows options - as determined by the product and
         * windows config values set out in the JSON configuration files.
         * \return A proxy object that points to the WindowsOptions whose values
         * have been determined by the managed (C#) plugin code.
         */
        static WindowsOptions^ get_windows_options()
        {
            return ConfigurationUtility::GetEOSCreateOptions()->options;
        }

        /**
         * \brief Get the InitializeOptions - as determined by the product and
         * windows config values set out in the JSON configuration files.
         * \return A proxy object that points to the InitializeOptions whose
         * values have been determined by the managed (C#) plugin code.
         */
        static InitializeOptions^ get_initialize_options()
        {
            return ConfigurationUtility::GetEOSInitializeOptions()->options;
        }
	};
}

#endif